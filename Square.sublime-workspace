{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"h",
				"h_a"
			],
			[
				"i",
				"inc\t#include \"…\""
			],
			[
				"Device",
				"DeviceNames"
			],
			[
				"p",
				"printf\tprintf …"
			],
			[
				"Devi",
				"DeviceNames"
			],
			[
				"num",
				"numDevices"
			],
			[
				"nu",
				"numDevices"
			],
			[
				"Pl",
				"PlatformIDs"
			],
			[
				"pl",
				"PlatformProfile"
			],
			[
				"Platfor",
				"PlatformVersion"
			],
			[
				"Pla",
				"PlatformNames"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#ifdef __APPLE__\n#include <OpenCL/opencl.h>\n#include <unistd.h>\n#else\n#include <CL/cl.h>\n#endif\n\n#include \"err_code.h\"\n#include \"wtime.h\"\n#include \"device_info.h\"\n//pick up device type from compiler command line or from\n//the default type\n#ifndef DEVICE\n#define DEVICE CL_DEVICE_TYPE_DEFAULT\n#endif\n\n//extern double wtime();       // returns time since some fixed past point (wtime.c)\n//extern int output_device_info(cl_device_id );\n\n\n//------------------------------------------------------------------------------\n\n#define TOL    (0.001)   // tolerance used in floating point comparisons\n#define LENGTH (4)    // length of vectors a, b, and c\n#define MATRIXSIZE (2)\n//------------------------------------------------------------------------------\n//\n// kernel:  vadd\n//\n// Purpose: Compute the elementwise sum c = a+b\n//\n// input: a and b float vectors of length count\n//\n// output: c float vector of length count holding the sum a + b\n//\n\nconst char *KernelSource = \"\\n\" \\\n\"__kernel void matMultiply(                                             \\n\" \\\n\"   __global float* a,                                                  \\n\" \\\n\"   __global float* b,                                                  \\n\" \\\n\"   __global float* c,                                                  \\n\" \\\n\"   const unsigned int count)                                           \\n\" \\\n\"{                                                                      \\n\" \\\n\"   int i = get_global_id(0);                                           \\n\" \\\n\"   int j = get_global_id(1);                                           \\n\" \\\n\"   if(i < count && j < count)                                          \\n\" \\\n\"   for(int k=0; k<MATRIXSIZE; ++k)                                     \\n\" \\\n\"   {                                                                   \\n\" \\\n\"       c[i*MATRIXSIZE + j] = a[i*MATRIXSIZE + k]*b[k*MATRIXSIZE + j];  \\n\" \\\n\"   }                                                                   \\n\" \\\n\"}                                                                      \\n\" \\\n\"\\n\";\n\n//------------------------------------------------------------------------------\n\n\nint main(int argc, char** argv)\n{\n    int          err;               // error code returned from OpenCL calls\n\n    float*       h_a = (float*) calloc(LENGTH, sizeof(float));       // a matrix\n    float*       h_b = (float*) calloc(LENGTH, sizeof(float));       // b matrix\n    float*       h_c = (float*) calloc(LENGTH, sizeof(float));       // c matrix (axb) returned from the compute device\n\n    unsigned int correct;           // number of correct results\n\n    size_t global;                  // global domain size\n\n    cl_device_id     device_id;     // compute device id\n    cl_context       context;       // compute context\n    cl_command_queue commands;      // compute command queue\n    cl_program       program;       // compute program\n    cl_kernel        ko_matMultply;       // compute kernel\n\n    cl_mem d_a;                     // device memory used for the input  a vector\n    cl_mem d_b;                     // device memory used for the input  b vector\n    cl_mem d_c;                     // device memory used for the output c vector\n\n    // Fill vectors a and b with random float values\n/*    int i = 0;\n    int count = LENGTH;\n    for(i = 0; i < count; i++){\n        h_a[i] = rand() / (float)RAND_MAX;\n        h_b[i] = rand() / (float)RAND_MAX;\n    }*/\n    h_a[0] = 1;\n    h_a[1] = 0;\n    h_a[2] = 0;\n    h_a[3] = 1;\n    h_b[0] = 1;\n    h_b[1] = 0;\n    h_b[2] = 0;\n    h_b[3] = 1;\n    // Set up platform and GPU device\n\n    cl_uint numPlatforms;\n\n    // Find number of platforms\n    err = clGetPlatformIDs(0, NULL, &numPlatforms);\n    checkError(err, \"Finding platforms\");\n    if (numPlatforms == 0)\n    {\n        printf(\"Found 0 platforms!\\n\");\n        return EXIT_FAILURE;\n    }\n\n    // Get all platforms\n    cl_platform_id Platform[numPlatforms];\n    err = clGetPlatformIDs(numPlatforms, Platform, NULL);\n    checkError(err, \"Getting platforms\");\n\n    // Secure a GPU\n    for (int i = 0; i < numPlatforms; i++)\n    {\n        err = clGetDeviceIDs(Platform[i], DEVICE, 1, &device_id, NULL);\n        if (err == CL_SUCCESS)\n        {\n            break;\n        }\n    }\n\n    if (device_id == NULL)\n        checkError(err, \"Finding a device\");\n\n    err = output_device_info(device_id);\n    checkError(err, \"Printing device output\");\n\n    // Create a compute context\n    context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);\n    checkError(err, \"Creating context\");\n\n    // Create a command queue\n    commands = clCreateCommandQueue(context, device_id, 0, &err);\n    checkError(err, \"Creating command queue\");\n\n    // Create the compute program from the source buffer\n    program = clCreateProgramWithSource(context, 1, (const char **) & KernelSource, NULL, &err);\n    checkError(err, \"Creating program\");\n\n    // Build the program\n    err = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);\n    if (err != CL_SUCCESS)\n    {\n        size_t len;\n        char buffer[2048];\n\n        printf(\"Error: Failed to build program executable!\\n%s\\n\", err_code(err));\n        clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, sizeof(buffer), buffer, &len);\n        printf(\"%s\\n\", buffer);\n        return EXIT_FAILURE;\n    }\n\n    // Create the compute kernel from the program\n    ko_matMultiply = clCreateKernel(program, \"matMultiply\", &err);\n    checkError(err, \"Creating kernel\");\n\n    // Create the input (a, b) and output (c) arrays in device memory\n    d_a  = clCreateBuffer(context,  CL_MEM_READ_ONLY,  sizeof(float) * count, NULL, &err);\n    checkError(err, \"Creating buffer d_a\");\n\n    d_b  = clCreateBuffer(context,  CL_MEM_READ_ONLY,  sizeof(float) * count, NULL, &err);\n    checkError(err, \"Creating buffer d_b\");\n\n    d_c  = clCreateBuffer(context,  CL_MEM_WRITE_ONLY, sizeof(float) * count, NULL, &err);\n    checkError(err, \"Creating buffer d_c\");\n\n    // Write a and b vectors into compute device memory\n    err = clEnqueueWriteBuffer(commands, d_a, CL_TRUE, 0, sizeof(float) * count, h_a, 0, NULL, NULL);\n    checkError(err, \"Copying h_a to device at d_a\");\n\n    err = clEnqueueWriteBuffer(commands, d_b, CL_TRUE, 0, sizeof(float) * count, h_b, 0, NULL, NULL);\n    checkError(err, \"Copying h_b to device at d_b\");\n\n    // Set the arguments to our compute kernel\n    err  = clSetKernelArg(ko_matMultiply, 0, sizeof(cl_mem), &d_a);\n    err |= clSetKernelArg(ko_matMultiply, 1, sizeof(cl_mem), &d_b);\n    err |= clSetKernelArg(ko_matMultiply, 2, sizeof(cl_mem), &d_c);\n    err |= clSetKernelArg(ko_matMultiply, 3, sizeof(unsigned int), &count);\n    checkError(err, \"Setting kernel arguments\");\n\n    double rtime = wtime();\n\n    // Execute the kernel over the entire range of our 1d input data set\n    // letting the OpenCL runtime choose the work-group size\n    global = count;\n    err = clEnqueueNDRangeKernel(commands, ko_matMultiply, 1, NULL, &global, NULL, 0, NULL, NULL);\n    checkError(err, \"Enqueueing kernel\");\n\n    // Wait for the commands to complete before stopping the timer\n    err = clFinish(commands);\n    checkError(err, \"Waiting for kernel to finish\");\n\n    rtime = wtime() - rtime;\n    printf(\"\\nThe kernel ran in %lf seconds\\n\",rtime);\n\n    // Read back the results from the compute device\n    err = clEnqueueReadBuffer( commands, d_c, CL_TRUE, 0, sizeof(float) * count, h_c, 0, NULL, NULL );  \n    if (err != CL_SUCCESS)\n    {\n        printf(\"Error: Failed to read output array!\\n%s\\n\", err_code(err));\n        exit(1);\n    }\n\n    // Test the results\n    correct = 0;\n    float tmp;\n\n    for(i = 0; i < count; i++)\n    {\n        tmp = h_a[i] + h_b[i];     // assign element i of a+b to tmp\n        tmp -= h_c[i];             // compute deviation of expected and output result\n        if(tmp*tmp < TOL*TOL)        // correct if square deviation is less than tolerance squared\n            correct++;\n        else {\n            printf(\" tmp %f h_a %f h_b %f h_c %f \\n\",tmp, h_a[i], h_b[i], h_c[i]);\n        }\n    }\n\n    // summarise results\n    printf(\"C = A+B:  %d out of %d results were correct.\\n\", correct, count);\n\n    // cleanup then shutdown\n    clReleaseMemObject(d_a);\n    clReleaseMemObject(d_b);\n    clReleaseMemObject(d_c);\n    clReleaseProgram(program);\n    clReleaseKernel(ko_matmultiply);\n    clReleaseCommandQueue(commands);\n    clReleaseContext(context);\n\n    free(h_a);\n    free(h_b);\n    free(h_c);\n\n    return 0;\n}\n",
			"file": "matMultiply.c",
			"file_size": 8511,
			"file_write_time": 131393137066915188,
			"settings":
			{
				"buffer_size": 8515,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 174.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/akashr/Documents/Project/OpenCL_Material/Codes/Square_Elements_in_an_Array/err_code.h",
		"/home/akashr/Documents/Project/OpenCL_Material/Codes/Square_Elements_in_an_Array/wtime.h",
		"/home/akashr/Documents/Project/OpenCL_Material/Codes/Square_Elements_in_an_Array/device_info.h",
		"/home/akashr/Documents/Project/OpenCL_Material/Codes/Square_Elements_in_an_Array/Square.c",
		"/home/akashr/Documents/Project/OpenCL_Material/Codes/DeviceQuery/DeviceQuery.c",
		"/home/akashr/Documents/Project/OpenCL_Material/Codes/Square_Elements_in_an_Array/device_picker.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ko_ma",
			"vadd",
			"output_device_info",
			"wtime",
			"]);            ",
			"kernel",
			"output_device_info",
			"rtime",
			"wtime",
			"h_a",
			"o"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "matMultiply.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8515,
						"regions":
						{
						},
						"selection":
						[
							[
								5436,
								5436
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Square.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
